/**
 * 
 */
package com.golden.gamedev.util;

import java.io.Serializable;
import java.util.Comparator;

/**
 * The {@link EqualsComparator} class provides a {@link Serializable}
 * {@link Comparator} implementation that provides the <a
 * href="http://en.wikipedia.org/wiki/Null_object_pattern">Null Object
 * Pattern</a> for a {@link Comparator} by treating both compared {@link Object}
 * instances as being equivalent by returning 0 from
 * {@link #compare(Object, Object)}.
 * 
 * @author MetroidFan2002
 * @version 1.0
 * @since 0.2.4
 * 
 */
public final class EqualsComparator implements Comparator, Serializable {
	
	/**
	 * Serializable ID generated by Eclipse.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * The singleton instance of the {@link EqualsComparator} class.
	 */
	public static final Comparator INSTANCE = new EqualsComparator();
	
	/**
	 * Creates a new {@link EqualsComparator} instance, marked private to avoid
	 * instantiation except via the {@link #INSTANCE singleton instance}.€€€
	 */
	private EqualsComparator() {
		super();
	}
	
	public int compare(Object arg0, Object arg1) {
		return 0;
	}
	
	/**
	 * Specialized hidden method defined via the {@link Serializable} interface
	 * documentation - reads only the singleton {@link #INSTANCE} from the
	 * bytestream each time a {@link EqualsComparator} instance is de-serialized
	 * in.
	 * @return Returns the singleton {@link #INSTANCE}.
	 */
	private Object readResolve() {
		return INSTANCE;
	}
	
	/**
	 * Specialized hidden method defined via the {@link Serializable} interface
	 * documentation - writes only the singleton {@link #INSTANCE} to the
	 * bytestream each time an {@link EqualsComparator} instance is serialized
	 * out.
	 * @return Returns the singleton {@link #INSTANCE}.
	 */
	private Object writeReplace() {
		return INSTANCE;
	}
}
