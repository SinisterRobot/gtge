/*
 * Copyright (c) 2008 Golden T Studios.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.golden.gamedev.object.background;

import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.VolatileImage;

import com.golden.gamedev.engine.BaseGraphics;

/**
 * The {@link StaticTileBackground} class is a {@link TileBackground} that
 * stores a {@link TileBackground#render(Graphics2D) render} of the
 * {@link TileBackground} class as an unchanging {@link VolatileImage} that is
 * then displayed constantly, dramatically improving performance for
 * {@link TileBackground} instances that will never change their state. <br />
 * <br />
 * @author MetroidFan2002
 * @version 1.0
 * @since 0.2.4
 * @see TileBackground
 * @see VolatileImage
 */
public class StaticTileBackground extends TileBackground {
	
	/**
	 * Serializable ID generated by Eclipse.
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * Whether or not the {@link #cache cached image} is ready to be displayed
	 * on the screen.
	 */
	private boolean imageRenderable;
	
	/**
	 * The cached {@link VolatileImage image} to display.
	 */
	private transient VolatileImage cache;
	
	/**
	 * Creates a new {@link StaticTileBackground} instance, using the given
	 * {@link BaseGraphics} instance to create a cached {@link VolatileImage},
	 * which has its contents drawn to based off the {@link BufferedImage
	 * images} and tiles array specified.
	 * @param bsGraphics The {@link BaseGraphics} instance containing a
	 *        {@link BaseGraphics#getComponent() component} that may be used to
	 *        {@link Component#createVolatileImage(int, int) create
	 *        VolatileImage} instances.
	 * @param images A one-dimensional array of {@link BufferedImage} instances
	 *        containing the images of all the tiles in this
	 *        {@link StaticTileBackground} instance.
	 * @param tiles A two-dimensional array of integers which specify the index
	 *        of the tile in the images array that should be used for the tile
	 *        in the matrix at that position when rendering.
	 * @see TileBackground#TileBackground(BufferedImage[], int[][])
	 */
	public StaticTileBackground(BaseGraphics bsGraphics,
	        BufferedImage images[], int tiles[][]) {
		super(images, tiles);
		
		this.cache = bsGraphics.getComponent().createVolatileImage(
		        bsGraphics.getSize().width, bsGraphics.getSize().height);
	}
	
	public void render(Graphics2D g) {
		if (!this.imageRenderable) {
			// Draw the image into the VolatileImage once and only once per
			// StaticTileBackground.
			super.render(this.cache.createGraphics());
			
			this.imageRenderable = true;
		}
		
		// Draw the unchanging VolatileImage onto the screen.
		g.drawImage(this.cache, 0, 0, null);
	}
}
